# -*- coding: utf-8 -*-
"""2016510082_Mustafa_Cagatay_Onal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T1-HlSwKvcy7cI6jYCw8Dc5yu_CuLNAh
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import sklearn
from sklearn import preprocessing 
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
init_notebook_mode(connected=True)
import plotly.graph_objs as go
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection  import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, mean_squared_error
from sklearn.model_selection import train_test_split

url='https://raw.githubusercontent.com/jenfly/opsd/master/opsd_germany_daily.csv'
data = pd.read_csv(url,sep=",")
data.head()

data.info()

url='https://raw.githubusercontent.com/jenfly/opsd/master/opsd_germany_daily.csv'
data = pd.read_csv(url,sep=",", usecols=[1])
df = data.iloc[::-1]
df

epoch_numbers=[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]

for l in range(len(epoch_numbers)):
  epoch_columns= ()
  newdf=pd.DataFrame(columns = epoch_columns)
  k=0
  for i in range(len(df)-(epoch_numbers[l])):
    simple_list = np.zeros(shape=(0,epoch_numbers[l]+1))
    for j in range(k,(epoch_numbers[l]+k+1)):
      simple_list = np.append(simple_list,df.iloc[j].values[0])
    listdf= pd.DataFrame(data=(simple_list))
    
    newdf = pd.concat([newdf,listdf.T] )
    k=k+1
  newdf.dropna(inplace=True)
  newdf.reset_index(drop=True, inplace=True)
  print(newdf.head())
  newdf.to_csv(r'/content/data_epoch' + str(epoch_numbers[l]) + '.csv',index=False)

neighbors = np.arange(1, 20, 2)
scores = []
accuracy_knn = []
RMS_knn = []

for i in range(len(epoch_numbers)):
  df=pd.read_csv('/content/data_epoch' + str(i+10) + '.csv')
  print("Epoch number:", i+8)
  min_max_scaler = preprocessing.MinMaxScaler()
  np_scaled = min_max_scaler.fit_transform(df)
  df_normalized = pd.DataFrame(np_scaled)
  df=df_normalized
  X= df.iloc[:,:-1]
  y=df.iloc[:,-1]
  X_tr, X_test, y_tr, y_test = train_test_split(X, y, test_size = 0.3)
  scores = []
  for k in neighbors:
    clf = KNeighborsRegressor(n_neighbors = k,  weights = 'distance', p=1)
    clf.fit(X_tr, y_tr)
    score = cross_val_score(clf, X_tr, y_tr, cv = 10)
    scores.append(score.mean())
  
  mse = [1-x for x in scores]
  optimal_k = neighbors[mse.index(min(mse))]
  print("Optimal K: ", optimal_k)
  clf_optimal = KNeighborsRegressor(n_neighbors = optimal_k)
  clf_optimal.fit(X_tr, y_tr)
  y_pred = clf_optimal.predict(X_test)
  acc = clf_optimal.score(X_test, y_test)
  print("Accuracy: ", acc*100)
  accuracy_knn.append(acc*100)
  RMS_knn.append(mean_squared_error(y_test, y_pred))
  print("RMS Error: ", mean_squared_error(y_test, y_pred))

plt.plot(epoch_numbers,accuracy_knn,'b-o',label='Accuracy over epoch number(KNN)');
plt.xlabel('Epoch Number')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.plot(epoch_numbers,RMS_knn,'b-o',label='RMS over epoch number(KNN)');
plt.xlabel('Epoch Number')
plt.ylabel('RMS')
plt.legend()
plt.show()

max(accuracy_knn)

min(RMS_knn)

acucuracy_mlr = []
mse_mlr = []

for i in range(len(epoch_numbers)):
  dataset=pd.read_csv('/content/data_epoch' + str(i+10) + '.csv')
  print("Epoch number:", i+10)
  min_max_scaler = preprocessing.MinMaxScaler()
  np_scaled = min_max_scaler.fit_transform(dataset)
  df_normalized = pd.DataFrame(np_scaled)
  dataset=df_normalized
  X= dataset.iloc[:, :-1].values
  Y=dataset.iloc[:, -1].values
  regressor = LinearRegression()
  regressor.fit(X,Y)
  accuracy = regressor.score(X,Y)*100
  print(accuracy)
  acucuracy_mlr.append(accuracy)
  y_pred = regressor.predict(X)
  mse_mlr.append(mean_squared_error(Y, y_pred))

plt.plot(epoch_numbers,acucuracy_mlr,'b-o',label='Accuracy over epoch number(Multiple Linear Regression)');
plt.xlabel('Epoch Number')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

max(acucuracy_mlr)

plt.plot(epoch_numbers,mse_mlr,'b-o',label='MSE over epoch number(Multiple Linear Regression)');
plt.xlabel('Epoch Number')
plt.ylabel('MSE')
plt.legend()
plt.show()

min(mse_mlr)